// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JedlixSDK
import Foundation
@_exported import JedlixSDK
import Swift
import SwiftUI
import WebKit
import _Concurrency
public enum DismissButtonStyle : Swift.String {
  case back
  case close
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.URLSession {
  
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func response(for request: Foundation.URLRequest, delegate: Foundation.URLSessionTaskDelegate? = nil) async throws -> (Foundation.Data, Foundation.URLResponse)
  #endif

}
@_Concurrency.MainActor(unsafe) public struct ConnectSessionView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(userIdentifier: Swift.String, sessionType: JedlixSDK.ConnectSessionType)
  @_Concurrency.MainActor(unsafe) public init(userIdentifier: Swift.String, sessionIdentifier: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9JedlixSDK18ConnectSessionViewV4bodyQrvp", 0) __
}
public enum ConnectSessionType {
  case vehicle
  case charger(chargingLocationId: Swift.String)
}
public enum HTTPError : Swift.Error, Foundation.LocalizedError {
  case notAuthenticated
  case invalidResponse
  case errorResponse(title: Swift.String? = nil, detail: Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
  public init(with data: Foundation.Data) throws
}
public struct HTTPErrorResponse : Swift.Codable {
  public let title: Swift.String
  public let detail: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public func configure(baseURL: Foundation.URL, authentication: JedlixSDK.Authentication)
public protocol Authentication {
  
  #if compiler(>=5.3) && $AsyncAwait
  func getAccessToken() async -> Swift.String?
  #endif

}
extension JedlixSDK.DismissButtonStyle : Swift.Equatable {}
extension JedlixSDK.DismissButtonStyle : Swift.Hashable {}
extension JedlixSDK.DismissButtonStyle : Swift.RawRepresentable {}
